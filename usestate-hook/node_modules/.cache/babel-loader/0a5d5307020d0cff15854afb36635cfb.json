{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactJS\\\\ReactJS\\\\usestate-hook\\\\src\\\\components\\\\SimpleForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n/*Using user entered data in our code.;\r\ntaking data from user using input tag and dispayed on webpage, only when submit button is clicked\r\n--Using onChange event\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SimpleForm() {\n  _s();\n\n  const [name, setName] = useState(\"\"); //const [isClicked, setClicked] = useState(false);-->Using Ternary operator.\n\n  const [userName, setUserName] = useState(\"\");\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n  /*Using Ternary Operator  */\n  // function handleClick() {\n  //   setClicked(true);\n  //   console.log(\"Clicked\");\n  // }\n\n  /*Without Ternary Operator*/\n  //Passed the event as partameter\n\n\n  function handleClickEvent(event) {\n    setUserName(name); //console.log(\"clicked\");\n\n    event.preventDefault(); //this method basically prevents the default next behaviour of the event\n    //In this case refreshing the form\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello \", userName, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleClickEvent,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        placeholder: \"What's your name?\",\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SimpleForm, \"rhD7x1ftSOB1bjIEfOxREc3X3jw=\");\n\n_c = SimpleForm;\nexport default SimpleForm; //form refresh the entire page after button click\n//so use click function for form event(i.e.,onSubmit) not button event and make sure button type attribute should be submit\n//still it refresh the page -- for this use a method event.preventDefault()\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleForm\");","map":{"version":3,"sources":["E:/ReactJS/ReactJS/usestate-hook/src/components/SimpleForm.js"],"names":["React","useState","SimpleForm","name","setName","userName","setUserName","handleChange","event","target","value","handleClickEvent","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC,CADoB,CAEpB;;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASM,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BJ,IAAAA,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AACA,WAASC,gBAAT,CAA0BH,KAA1B,EAAiC;AAC/BF,IAAAA,WAAW,CAACH,IAAD,CAAX,CAD+B,CAE/B;;AAEAK,IAAAA,KAAK,CAACI,cAAN,GAJ+B,CAK/B;AACA;AACD;;AAED,sBACE;AAAA,4BAEE;AAAA,2BAAWP,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAM,MAAA,QAAQ,EAAEM,gBAAhB;AAAA,8BACE;AACE,QAAA,QAAQ,EAAEJ,YADZ;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,WAAW,EAAC,mBAHd;AAIE,QAAA,KAAK,EAAEJ;AAJT;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA1CQD,U;;KAAAA,U;AA2CT,eAAeA,UAAf,C,CACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n/*Using user entered data in our code.;\r\ntaking data from user using input tag and dispayed on webpage, only when submit button is clicked\r\n--Using onChange event\r\n*/\r\nfunction SimpleForm() {\r\n  const [name, setName] = useState(\"\");\r\n  //const [isClicked, setClicked] = useState(false);-->Using Ternary operator.\r\n\r\n  const [userName, setUserName] = useState(\"\");\r\n\r\n  function handleChange(event) {\r\n    setName(event.target.value);\r\n  }\r\n\r\n  /*Using Ternary Operator  */\r\n  // function handleClick() {\r\n  //   setClicked(true);\r\n  //   console.log(\"Clicked\");\r\n  // }\r\n\r\n  /*Without Ternary Operator*/\r\n  //Passed the event as partameter\r\n  function handleClickEvent(event) {\r\n    setUserName(name);\r\n    //console.log(\"clicked\");\r\n\r\n    event.preventDefault();\r\n    //this method basically prevents the default next behaviour of the event\r\n    //In this case refreshing the form\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* {isClicked ? <h1>Hello {name}</h1> : <h1>Simple Form</h1>} --> Using Ternary Operator*/}\r\n      <h1>Hello {userName}!</h1>\r\n      <form onSubmit={handleClickEvent}>\r\n        <input\r\n          onChange={handleChange}\r\n          type=\"text\"\r\n          placeholder=\"What's your name?\"\r\n          value={name}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default SimpleForm;\r\n//form refresh the entire page after button click\r\n//so use click function for form event(i.e.,onSubmit) not button event and make sure button type attribute should be submit\r\n//still it refresh the page -- for this use a method event.preventDefault()\r\n"]},"metadata":{},"sourceType":"module"}