{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactJS\\\\ReactJS\\\\usestate-hook\\\\src\\\\components\\\\TwoInputForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TwoInputForm() {\n  _s();\n\n  //Taken as an object -- fName, lName\n  const [fullName, setFullName] = useState({\n    fName: \"\",\n    lName: \"\"\n  });\n  const [name, setName] = useState({\n    first: \"\",\n    last: \"\"\n  });\n\n  function handleChange(event) {\n    // const value = event.target.value;\n    // const name = event.target.name;\n    const {\n      value,\n      name\n    } = event.target; //Destructuring an object\n    //console.log(value); //user entered value\n    //console.log(name); //name attribute value\n    //1- if conditions with setfullName function-->displays only one at a time but not two\n\n    /*if (name === \"fName\") {\r\n      setFullName({ fName: value });\r\n    } else if (name === \"lName\") {\r\n      setFullName({ lName: value });\r\n    }       */\n    //2-setFullName function with if condition\n\n    setFullName(prevValue => {\n      //console.log(prevValue);//{fName: \"\", lName: \"\"}-->accessing -- prevValue.fName; prevValue.lName\n      if (name === \"fName\") {\n        return {\n          fName: value,\n          lName: prevValue.lName\n        };\n      } else if (name === \"lName\") {\n        return {\n          lName: value,\n          fName: prevValue.fName\n        };\n      }\n    });\n  }\n\n  function handleSubmit(event) {\n    setName({\n      first: fullName.fName,\n      last: fullName.lName\n    });\n    event.preventDefault(); //preventing form default browsing(refreshing)\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Displaying User Entered data from two Input Elements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Hello \", name.first, \" \", name.last, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        name: \"fName\",\n        type: \"text\",\n        placeholder: \"Enter your First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        name: \"lName\",\n        type: \"text\",\n        placeholder: \"Enter your Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TwoInputForm, \"7DqLpR7fcDCt1Dixz9lMDp6XVpI=\");\n\n_c = TwoInputForm;\nexport default TwoInputForm; //used same handleChange function for both inputs but we can take inputs from user based on name attributes.\n//10 and 25 lines\n//when we start typing -- handleChange--pass event-- stores new value and value of name attr\n//then calls setFullName fun and stores prevValue\n//It is controlled component-- controlling form inputs using state with the help of handlechange and handlesubmit functions\n\nvar _c;\n\n$RefreshReg$(_c, \"TwoInputForm\");","map":{"version":3,"sources":["E:/ReactJS/ReactJS/usestate-hook/src/components/TwoInputForm.js"],"names":["React","useState","TwoInputForm","fullName","setFullName","fName","lName","name","setName","first","last","handleChange","event","value","target","prevValue","handleSubmit","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AACvCI,IAAAA,KAAK,EAAE,EADgC;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAAxC;AAKA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC;AAC/BQ,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,IAAI,EAAE;AAFyB,GAAD,CAAhC;;AAKA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AACA;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASN,MAAAA;AAAT,QAAkBK,KAAK,CAACE,MAA9B,CAH2B,CAGW;AACtC;AACA;AAEA;;AACA;AACJ;AACA;AACA;AACA;AAEI;;AACAV,IAAAA,WAAW,CAAEW,SAAD,IAAe;AACzB;AAEA,UAAIR,IAAI,KAAK,OAAb,EAAsB;AACpB,eAAO;AACLF,UAAAA,KAAK,EAAEQ,KADF;AAELP,UAAAA,KAAK,EAAES,SAAS,CAACT;AAFZ,SAAP;AAID,OALD,MAKO,IAAIC,IAAI,KAAK,OAAb,EAAsB;AAC3B,eAAO;AACLD,UAAAA,KAAK,EAAEO,KADF;AAELR,UAAAA,KAAK,EAAEU,SAAS,CAACV;AAFZ,SAAP;AAID;AACF,KAdU,CAAX;AAeD;;AAED,WAASW,YAAT,CAAsBJ,KAAtB,EAA6B;AAC3BJ,IAAAA,OAAO,CAAC;AACNC,MAAAA,KAAK,EAAEN,QAAQ,CAACE,KADV;AAENK,MAAAA,IAAI,EAAEP,QAAQ,CAACG;AAFT,KAAD,CAAP;AAKAM,IAAAA,KAAK,CAACK,cAAN,GAN2B,CAMH;AACzB;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,2BAESV,IAAI,CAACE,KAFd,OAEsBF,IAAI,CAACG,IAF3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAME;AAAM,MAAA,QAAQ,EAAEM,YAAhB;AAAA,8BACE;AACE,QAAA,QAAQ,EAAEL,YADZ;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AACE,QAAA,QAAQ,EAAEA,YADZ;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cARF,eAcE;AAAA;AAAA;AAAA;AAAA,cAdF,eAeE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA/EQT,Y;;KAAAA,Y;AAgFT,eAAeA,YAAf,C,CAEA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction TwoInputForm() {\r\n  //Taken as an object -- fName, lName\r\n  const [fullName, setFullName] = useState({\r\n    fName: \"\",\r\n    lName: \"\",\r\n  });\r\n\r\n  const [name, setName] = useState({\r\n    first: \"\",\r\n    last: \"\",\r\n  });\r\n\r\n  function handleChange(event) {\r\n    // const value = event.target.value;\r\n    // const name = event.target.name;\r\n    const { value, name } = event.target; //Destructuring an object\r\n    //console.log(value); //user entered value\r\n    //console.log(name); //name attribute value\r\n\r\n    //1- if conditions with setfullName function-->displays only one at a time but not two\r\n    /*if (name === \"fName\") {\r\n      setFullName({ fName: value });\r\n    } else if (name === \"lName\") {\r\n      setFullName({ lName: value });\r\n    }       */\r\n\r\n    //2-setFullName function with if condition\r\n    setFullName((prevValue) => {\r\n      //console.log(prevValue);//{fName: \"\", lName: \"\"}-->accessing -- prevValue.fName; prevValue.lName\r\n\r\n      if (name === \"fName\") {\r\n        return {\r\n          fName: value,\r\n          lName: prevValue.lName,\r\n        };\r\n      } else if (name === \"lName\") {\r\n        return {\r\n          lName: value,\r\n          fName: prevValue.fName,\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    setName({\r\n      first: fullName.fName,\r\n      last: fullName.lName,\r\n    });\r\n\r\n    event.preventDefault(); //preventing form default browsing(refreshing)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Displaying User Entered data from two Input Elements</h1>\r\n      <h2>\r\n        {/* displaying through handleSubmit function */}\r\n        Hello {name.first} {name.last}!\r\n      </h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          onChange={handleChange}\r\n          name=\"fName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter your First Name\"\r\n        />\r\n        <br />\r\n        <input\r\n          onChange={handleChange}\r\n          name=\"lName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter your Last Name\"\r\n        />\r\n        <br />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default TwoInputForm;\r\n\r\n//used same handleChange function for both inputs but we can take inputs from user based on name attributes.\r\n\r\n//10 and 25 lines\r\n//when we start typing -- handleChange--pass event-- stores new value and value of name attr\r\n//then calls setFullName fun and stores prevValue\r\n\r\n//It is controlled component-- controlling form inputs using state with the help of handlechange and handlesubmit functions\r\n"]},"metadata":{},"sourceType":"module"}