{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactJS\\\\ReactJS\\\\usestate-hook\\\\src\\\\components\\\\TwoInputForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TwoInputForm() {\n  _s();\n\n  //Taken as an object -- fName, lName\n  const [fullName, setFullName] = useState({\n    fName: \"\",\n    lName: \"\"\n  });\n\n  function handleChange(event) {\n    // const value = event.target.value;\n    // const name = event.target.name;\n    const {\n      value,\n      name\n    } = event.target; //Destructuring an object\n    //console.log(value); //user entered value\n    //console.log(name); //name attribute value\n    //1- if conditions with setfullName function-->displays only one at a time but not two\n\n    /*if (name === \"fName\") {\r\n      setFullName({ fName: value });\r\n    } else if (name === \"lName\") {\r\n      setFullName({ lName: value });\r\n    }       */\n    //2-setFullName function with if condition\n\n    setFullName(prevValue => {\n      //console.log(prevValue);//{fName: \"\", lName: \"\"}-->accessing -- prevValue.fName; prevValue.lName\n      if (name === \"fName\") {\n        return {\n          fName: value,\n          lName: prevValue.lName\n        };\n      } else if (name === \"lName\") {\n        return {\n          lName: value,\n          fName: prevValue.fName\n        };\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Using user Enetered data from two Input Elements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Hello \", fullName.fName, \" \", fullName.lName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        name: \"fName\",\n        type: \"text\",\n        placeholder: \"Enter your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        name: \"lName\",\n        type: \"email\",\n        placeholder: \"Enter your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TwoInputForm, \"qL3hhUFseOvqfdp2475Lyxa1gbE=\");\n\n_c = TwoInputForm;\nexport default TwoInputForm; //used same handleChange function for both inputs but we can take inputs from user based on name attributes.\n//10 and 25 lines\n//when we start typing -- handleChange--pass event-- stores new value and value of name attr\n//then calls setFullName fun and stores prevValue\n\nvar _c;\n\n$RefreshReg$(_c, \"TwoInputForm\");","map":{"version":3,"sources":["E:/ReactJS/ReactJS/usestate-hook/src/components/TwoInputForm.js"],"names":["React","useState","TwoInputForm","fullName","setFullName","fName","lName","handleChange","event","value","name","target","prevValue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC;AACvCI,IAAAA,KAAK,EAAE,EADgC;AAEvCC,IAAAA,KAAK,EAAE;AAFgC,GAAD,CAAxC;;AAKA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B;AACA;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,KAAK,CAACG,MAA9B,CAH2B,CAGW;AACtC;AACA;AAEA;;AACA;AACJ;AACA;AACA;AACA;AAEI;;AACAP,IAAAA,WAAW,CAAEQ,SAAD,IAAe;AACzB;AAEA,UAAIF,IAAI,KAAK,OAAb,EAAsB;AACpB,eAAO;AACLL,UAAAA,KAAK,EAAEI,KADF;AAELH,UAAAA,KAAK,EAAEM,SAAS,CAACN;AAFZ,SAAP;AAID,OALD,MAKO,IAAII,IAAI,KAAK,OAAb,EAAsB;AAC3B,eAAO;AACLJ,UAAAA,KAAK,EAAEG,KADF;AAELJ,UAAAA,KAAK,EAAEO,SAAS,CAACP;AAFZ,SAAP;AAID;AACF,KAdU,CAAX;AAeD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,2BACSF,QAAQ,CAACE,KADlB,OAC0BF,QAAQ,CAACG,KADnC;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,8BACE;AACE,QAAA,QAAQ,EAAEC,YADZ;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AACE,QAAA,QAAQ,EAAEA,YADZ;AAEE,QAAA,IAAI,EAAC,OAFP;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cAPF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GA9DQL,Y;;KAAAA,Y;AA+DT,eAAeA,YAAf,C,CAEA;AAEA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction TwoInputForm() {\r\n  //Taken as an object -- fName, lName\r\n  const [fullName, setFullName] = useState({\r\n    fName: \"\",\r\n    lName: \"\",\r\n  });\r\n\r\n  function handleChange(event) {\r\n    // const value = event.target.value;\r\n    // const name = event.target.name;\r\n    const { value, name } = event.target; //Destructuring an object\r\n    //console.log(value); //user entered value\r\n    //console.log(name); //name attribute value\r\n\r\n    //1- if conditions with setfullName function-->displays only one at a time but not two\r\n    /*if (name === \"fName\") {\r\n      setFullName({ fName: value });\r\n    } else if (name === \"lName\") {\r\n      setFullName({ lName: value });\r\n    }       */\r\n\r\n    //2-setFullName function with if condition\r\n    setFullName((prevValue) => {\r\n      //console.log(prevValue);//{fName: \"\", lName: \"\"}-->accessing -- prevValue.fName; prevValue.lName\r\n\r\n      if (name === \"fName\") {\r\n        return {\r\n          fName: value,\r\n          lName: prevValue.lName,\r\n        };\r\n      } else if (name === \"lName\") {\r\n        return {\r\n          lName: value,\r\n          fName: prevValue.fName,\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Using user Enetered data from two Input Elements</h1>\r\n      <h2>\r\n        Hello {fullName.fName} {fullName.lName}\r\n      </h2>\r\n      <form>\r\n        <input\r\n          onChange={handleChange}\r\n          name=\"fName\"\r\n          type=\"text\"\r\n          placeholder=\"Enter your Name\"\r\n        />\r\n        <input\r\n          onChange={handleChange}\r\n          name=\"lName\"\r\n          type=\"email\"\r\n          placeholder=\"Enter your Email\"\r\n        />\r\n        <button>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default TwoInputForm;\r\n\r\n//used same handleChange function for both inputs but we can take inputs from user based on name attributes.\r\n\r\n//10 and 25 lines\r\n//when we start typing -- handleChange--pass event-- stores new value and value of name attr\r\n//then calls setFullName fun and stores prevValue\r\n"]},"metadata":{},"sourceType":"module"}